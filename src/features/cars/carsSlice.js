import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getCars, addCar, updateCar, deleteCar } from './carsAPI';

const initialState = {
  cars: [],
  status: 'idle',
  error: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchCars = createAsyncThunk(
  'cars/fetchCars',
  async () => {
    const response = await getCars();
    console.log('response', response);
    return response;
  }
);

export const addCars = createAsyncThunk(
  'cars/addCars',
  async (data) => {
    const response = await addCar(data);
    console.log('response', response);
    return response;
  }
);

export const updateCars = createAsyncThunk(
  'cars/updateCars',
  async ([id, data]) => {
    console.log(id, data);
    await updateCar(id, data);
    return [id, data];
  }
);

export const removeCars = createAsyncThunk(
  'cars/removeCars',
  async (id) => {
    await deleteCar(id);
    return id;
  }
);

export const counterSlice = createSlice({
  name: 'cars',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchCars.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchCars.fulfilled, (state, action) => {
        state.status = 'idle';
        state.cars = action.payload;
      })
      .addCase(fetchCars.rejected, (state, action) => {
        state.status = 'errored';
        state.error = action.error.message;
      });

      builder
      .addCase(addCars.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addCars.fulfilled, (state, action) => {
        state.status = 'idle';
        state.cars.push(action.payload);
      })
      .addCase(addCars.rejected, (state, action) => {
        state.status = 'errored';
        state.error = action.error.message;
      });

      builder
      .addCase(updateCars.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateCars.fulfilled, (state, action) => {
        state.status = 'idle';
        const [id, changes] = action.payload;
        const idx = state.cars.findIndex(({_id}) => _id === id);
        state.cars[idx] = {
          ...state.cars[idx],
          ...changes,
        };
      })
      .addCase(updateCars.rejected, (state, action) => {
        state.status = 'errored';
        state.error = action.error.message;
      });

      builder
      .addCase(removeCars.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(removeCars.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log('id', action.payload);
        const idx = state.cars.findIndex(({_id}) => {
          console.log(_id, action.payload);
          return _id === action.payload
        });
        console.log('idx', idx);
        state.cars = [...state.cars.slice(0, idx), ...state.cars.slice(idx+1)];
      })
      .addCase(removeCars.rejected, (state, action) => {
        state.status = 'errored';
        state.error = action.error.message;
      });
  },
});

// export const {  } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectStatus = (state) => state.cars.status;
export const selectCars = (state) => state.cars.cars;
export const selectError = (state) => state.cars.error;


export default counterSlice.reducer;
